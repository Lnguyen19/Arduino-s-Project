# -*- coding: utf-8 -*-
"""classify_project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pfmd4yAMUOzUZ8wFw7UYDsT5FYocA696
"""

! pip install kaggle

import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
import cv2
import os
import numpy as np
from google.colab import drive

drive.mount('/content/gdrive')
folder_path = '/content/gdrive/My Drive/Colab Notebooks/quickdraw_data/myData'
#img = cv2.imread('/content/gdrive/My Drive/Colab Notebooks/quickdraw_data/DogsCats/Cats/cat1.jpeg')
#print(img)
images = []
labels = []

for filename in os.listdir(folder_path):
    if filename.startswith('cat'):
        label = 0
        #print('got here')
    elif filename.startswith('dog'):
        label = 1
    else:
        print(f"Skipping file {filename} as it does not match criteria")
        continue
    img = cv2.imread(os.path.join(folder_path,filename))
    height, width = img.shape[:2]
    if width<height:
      new_width = 244
      new_height = int(width * new_width/width)
    else:
      new_height = 244
      new_width = int(height* new_height/height)
    #img = cv2.resize(img,(224,224))
    new_height = new_height - new_height % 2
    new_width = new_width - new_width % 2
    img = cv2.resize(img,(new_width,new_height))
    img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    img = img/255.0
    images.append(img)
    labels.append(label)
images = np.array(images)
labels = np.array(labels)
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.1)
y_train = to_categorical(y_train, num_classes=2)
y_test = to_categorical(y_test, num_classes=2)

model = Sequential()

model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(new_width, new_height, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(2, activation='softmax'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))



